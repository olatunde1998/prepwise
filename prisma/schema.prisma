// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "mongodb"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  email     String      @unique
  name      String?
  password  String
  interview Interview[]
  feedback  Feedback[]
  posts     Post[]
  comments  Comment[]
  sessions  Session[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Interview {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  transcript Json // You store full transcript as JSON
  finalized  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  role       String
  level      String
  type       String
  techstack  String[]   @db.String
  questions  String[]   @db.String
  coverImage String
  user       User       @relation(fields: [userId], references: [id])
  feedback   Feedback[] // One-to-many if you ever support multiple feedbacks per interview
}

model Feedback {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  interviewId         String    @db.ObjectId
  userId              String    @db.ObjectId
  totalScore          Float
  categoryScores      Json // Use zod validation in app code
  strengths           String[]
  areasForImprovement String[]
  finalAssessment     String
  createdAt           DateTime  @default(now())
  interview           Interview @relation(fields: [interviewId], references: [id])
  user                User      @relation(fields: [userId], references: [id])
}

model Post {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String?
  published Boolean   @default(false)
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  comments  Comment[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
